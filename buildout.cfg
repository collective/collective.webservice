# buildout.cfg file for Plone 4 development work
# - for production installations please use http://plone.org/download
# Each part has more information about its recipe on PyPi
# http://pypi.python.org/pypi 
# ... just reach by the recipe name

# Hostname
[hosts]
devserver = localhost

# Port from host
[ports]
devserver = 8081

# User
[user]
username = admin

# Password
[password]
passwd = admin

[buildout]
parts =  
    instance
    zopepy
    i18ndude
    zopeskel
    test
    coverage-report
    omelette

extends = 
    http://dist.plone.org/release/4.2.1/versions.cfg

# Add additional egg download sources here. dist.plone.org contains archives
# of Plone packages.
find-links =
    http://dist.plone.org/release/4.2.1
    http://dist.plone.org/thirdparty

extensions = 
    mr.developer
    buildout.dumppickedversions

auto-checkout =

sources = sources

versions = versions

# Reference any folders where you have Python egg source code under development here 
# e.g.: develop = src/my.package
# If you are using the mr.developer extension and have the source code in a 
# repository mr.developer will handle this automatically for you
develop =
    src/collective.webservice

[eggs]
main =
    Plone
    PIL
    httplib2
    SOAPpy
    simplejson

test =
    collective.webservice [test]

devtools =
    plone.reload
    Products.PDBDebugMode
    Products.PrintingMailHost
    Products.DocFinderTab


# Create bin/instance command to manage Zope start up and shutdown
# See other options supported by this recipe at http://pypi.python.org/pypi/plone.recipe.zope2instance 
[instance]
recipe = plone.recipe.zope2instance
user = ${user:username}:${password:passwd}
http-address = ${hosts:devserver}:${ports:devserver}
debug-mode = on
verbose-security = on
blob-storage = var/blobstorage

eggs =
    ${eggs:main}
    ${eggs:test}
    ${eggs:devtools}

# Some pre-Plone 3.3 packages may need you to register the package name here in 
# order their configure.zcml to be run (http://plone.org/products/plone/roadmap/247)
# - this is never required for packages in the Products namespace (Products.*)
zcml =

# zopepy commands allows you to execute Python scripts using a PYTHONPATH 
# including all the configured eggs
[zopepy]
recipe = zc.recipe.egg
eggs = ${instance:eggs}
interpreter = zopepy
scripts = zopepy

# create bin/i18ndude command
[i18ndude]
unzip = true
recipe = zc.recipe.egg
eggs = i18ndude

# Test Runner
# create bin/test command
# Run: bin/test to run all tests
# Run: bin/test -s my.package to test a particular package
[test]
recipe = zc.recipe.testrunner
defaults = ['--auto-color', '--auto-progress']
eggs =
    ${instance:eggs}

# Coverage report generator
# Run: bin/test --coverage=coverage
# and then: bin/coveragereport
[coverage-report]
recipe = zc.recipe.egg
eggs = z3c.coverage
scripts = coveragereport
arguments = ('parts/test/coverage','coverage')


# create ZopeSkel and paster commands with dexterity support
[zopeskel]
recipe = zc.recipe.egg
eggs =
    ZopeSkel
    PasteScript
    zopeskel.dexterity

# symlinks all Python source code to parts/omelette folder when buildout is run
# windows users will need to install additional software for this part to build 
# correctly.  See http://pypi.python.org/pypi/collective.recipe.omelette for
# relevant details.
[omelette]
recipe = collective.recipe.omelette
eggs = ${instance:eggs}

# Put your mr.developer managed source code repositories here, see
# http://pypi.python.org/pypi/mr.developer for details on the format of
# this part
[sources]
#collective.developermanual = git git://github.com/collective/collective.developermanual.git
collective.webservice = git git://github.com/collective/collective.webservice.git
#collective.webservice = fs collective.webservice

# Version pindowns for new style products go here - this section extends one 
# provided in http://dist.plone.org/rel-ease/
[versions]